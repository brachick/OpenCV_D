#include <opencv2/opencv.hpp>
#include <iostream>
#include <math.h>

using namespace cv;


int main(int argc, char** argv) {
	Mat src, dst;
	src = imread("wz.jpg");
	namedWindow("input", CV_WINDOW_AUTOSIZE);
	imshow("input", src);//传入输入图片并显示

	Mat gray;
	namedWindow("gray", CV_WINDOW_AUTOSIZE);
	cvtColor(src, gray, CV_BGR2GRAY);//转成灰度图像
	imshow("gray", gray);//显示灰度图像
	morphologyEx(gray, gray, CV_MOP_CLOSE, getStructuringElement(MORPH_RECT, Size(3, 3)));
	Mat erzhi;
	namedWindow("erzhi", CV_WINDOW_AUTOSIZE);
	adaptiveThreshold(gray,erzhi,255,ADAPTIVE_THRESH_MEAN_C,THRESH_BINARY,9,-28);//源，输出，像素最大值，平均还是高斯，二值化类型，块大小，常数C
	imshow("erzhi", erzhi);//二值化

	Mat hline = getStructuringElement(MORPH_RECT, Size(erzhi.cols / 16, 1), Point(-1, -1));//留下横线
	Mat lline = getStructuringElement(MORPH_RECT, Size(1, erzhi.rows / 16), Point(-1, -1));//留下竖线
	Mat k = getStructuringElement(MORPH_RECT, Size(1, 1));
	Mat k1 = getStructuringElement(MORPH_RECT, Size(3, 3));
	erode(erzhi, erzhi, k);
	dilate(erzhi, dst, k);
	//bitwise_not(dst, dst);
	//erode(dst, dst,k1);
	//dilate(erzhi, dst, k1);
	morphologyEx(dst,dst,CV_MOP_OPEN, getStructuringElement(MORPH_RECT, Size(1, 3)));
	bitwise_not(dst, dst);
	morphologyEx(dst, dst, CV_MOP_CLOSE, getStructuringElement(MORPH_RECT, Size(1, 3)));
	
	//blur(dst, dst, Size(3, 3), Point(-1, -1));
	namedWindow("out", CV_WINDOW_AUTOSIZE);
	imshow("out", dst);
	waitKey(0);
	return 0;
}